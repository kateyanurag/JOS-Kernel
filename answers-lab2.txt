
****************************************ANSWERS TO THE QUESTIONS***************************************************
					========================

1) Assuming that the following JOS kernel code is correct, what type should variable x have, uintptr_t or physaddr_t?
	mystery_t x;
	char* value = return_a_pointer();
	*value = 10;
	x = (mystery_t) value;
Answer : uintptr_t


3)We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernel's memory?
 What specific mechanisms protect the kernel memory?
Answer : The Kernel memory is protected by the use of page table entry flags. These flags are the permissions which decides the access control for the user programs and the kernel itself.

4) What is the maximum amount of physical memory that this operating system can support? Why?
Answer : JOS can support 4 GB of physical memory. JOS has 32-bit adderssable region. But due to design imitations, JOS use only first 256 MB of space.

5) How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?
Answer : The overhead involves additional space for pagetables, kernel page directory as well as the PageInfo structure for all the pages.
	 The overhead is broken down as : sizeof(kernal page directory) + 2^10 * sizeof(page table) + npages * sizeof(PageInfo structure).


6) Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?
Answer : As soon as paging is turned on, we jump above the KERNBASE. A 4MB region in phys address space ranging from 0 to 4MB makes it possible to continue execution at low EIP before the paging is enabled. The transition of jumping above the KERNBASE is necessary because after the jump, we enter the C code where actual paging mechanism starts. Also, a large amount of virtual memory is mapped to phys memory which involves page table manipulaion operations. For all these things to happen, transition t0 higher address space is required. 


******************************************************* CHALLENGE EXPLANATION ***********************************************
						Extend the JOS kernel monitor with commands
						===========================================

1) showmappings : # This command displays all the physical page mapping for a paticular range of virtual addresses.
		  # USAGE  :  >showmappings   start-address   end-address 
		  # Both the start and end addresses are in hexadecimal formats.
		  # Example  :  >showmappings   0xffc000000 0Xffc0000f

2) setperms :	 # This command sets the permissions of the page table entry for a given virtual address.
	     	 # USAGE  :   >setperms    virt-address  perm1 [perm2] [perm3]
	     	 # The virtual address is in hexadecimal format. perm1, perm2 and perm3 represents the three types of permissions viz. PTE_P, PTE_T and
		   PTE_W. Atleast one permission should be given in the command.
	     	 # Example  : >setperms   0Xffc00000 pte_w

3) clearperms : # This command clears the permissions of the page table entry for a given virtual address.
	       	# USAGE  :   >clearperms    virt-address  
	      	# The virtual address is in hexadecimal format. 
	     	# Example  : >clearperms   0Xffc00000

4) changeperms : # This command changes the permissions of the page table entry for a given virtual address. It internally calls clearperms first and 
                   then the setperms command
	        # USAGE  :   >changeperms    virt-address  perm1 [perm2] [perm3]
	        # The virtual address is in hexadecimal format. perm1, perm2 and perm3 represents the three types of permissions viz. PTE_P, PTE_T and
		 PTE_W. Atleast one permission should be given in the command.
	        # Example  : >changeperms   0Xffc00000 pte_w pte_p

3) dump :       # This command dumps the memory contents on the console for a given virtual address.
	        # USAGE  :   >dump    virt-address  
	        # The virtual address is in hexadecimal format. 
	        # Example  : >dump   0Xffc00000
 




































