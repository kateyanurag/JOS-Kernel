1) What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
Answer : The advantages of providing individual handler function are (1) The user can invoke any exception/interrupt by software. Thus it is possible to implement system calls using software interrupts.
(2) It increases modularity of the code. Also every interrupts code has separate way(logic) of handling exceptions . So its better to provide individual handlers for interrupts.



2) Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?
Answer : The only thing which I was required to do is to set the descriptor level for page fault as 0(user doesn't have privileges). The Kernel should not allow users to invoke exceptions which they don't have right to.  This can compromise kernel security and violate kernel integrity. If a user script tries to generate int $14, then the kernel produces interrupt vector 13 (General protection fault. This happens because the user should not be allowed to generate int $14 as it is a privileged instruction.



3) The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?
Answer : The dpl of breakpoint interrupt is set to 3 i.e. user level processes are previlidged to gererate this interrupt. If we want to trigger general protection fault instead of breakpoint, then the dpl of breakpoint needs to be set to 0.

4) What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
Answer : These mechanisms are used to apply policies over user programs. Using DPL in SETGATE, we can ensure kernel privileges. Thus when user attempts to generate unprivileged interrupt, the SETGATE protects the kernel by causing general protection fault for the user.




CHALLANGE:
Question : Challenge! You probably have a lot of very similar code right now, between the lists of TRAPHANDLER in trapentry.S and their installations in trap.c. Clean this up. Change the macros in trapentry.S to automatically generate a table for trap.c to use. Note that you can switch between laying down code and data in the assembler by using the directives .text and .data.
Answer:
Changes in Trapentry.S and trap.c
1) New definitions of vectors :
.data
.global interrupss
interruptss :
….
….
…. (interrupt vectors)
.long 'name' 

2) Defined Function pointers for these names in trap.c
3) From these handlers (.long name), the function trap_init in trap.c
accsses all handlers in SETGATE functions.
