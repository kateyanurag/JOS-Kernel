Q1) Do you have to do anything else to ensure that this I/O privilege setting is saved and restored properly when 
you subsequently switch from one environment to another? Why?

We do not need to explicitly perform any task for I/O privilege settings. 
During switching of the tasks, the EFLAGS register is saved in the trapframe by hardware.
These flags are then restored when the environment is again scheduled for running.


Challenge : 
 ** Implement Unix-style exec.

** Difference between spawn() and exec()
When a process issues spawn, it creates another process with new process id that corresponds to the program specified
in the function's argument. Exec on the other hand causes a process to cease to run the current program and begins to 
run another program. So no child process
is forked in case of exec().

Implementation:
1) I have modified the code of spawn from spawn.c and have created a new file exec.c which contains the 
implementation of exec.


2) exec_init_stack() in exec.c compared to init_stack() in spawn.c
exec_init_stack() in exec.c is almost the same as that of the init_stack in spawn(). The only difference is 
in the sys_page_map() call. In case of spawn, the sys_page_map maps the stack into childs adddress space. In case of 
exec, the stack, starting at location mem_loc defined in exec(), is mapped into the current proesses address space. 
The stack contains actual pages of the new program which the current environment should start to execute.

3) exec() in exec.c compared to spawn() in spawn.c
There are two chages in exec() as compared to spawn().
First, we don't need to fork a child process in exec as we did in spawn.
Second, the mapping of the new program segments is directly done in childs address space in spawn function. But in 
case of exec since the same env i.e. the current env will be executing a new program, we cant directly map new 
program segments in the current enviroments address space (since the cur env is currently in execution). Thus, we
map these new segments in some temporary location and then do a system call.

4) sys_exec() system call 
This system call is called from exec after the new program segments are mapped in a temporary location.
This call will trap into kernel and thus will halt the current env. Now in this system call, we can do the actual 
mapping of pages of new program to the current env's address space by using page_lookup and page_inset functions.
Then lastly in this system call, we call env_run run to the current env. After this the cur env will run and execute the
new program

** TESTING CHALLENGE:
1) Uncomment line:31 in inc/lib.h => Enable exec functionality in user mode
2) Uncomment line:4 in inc/syscall.h => Enable exec functionality in kernel mode
3) make clean; make run-exechello => exechello.c is a new file created in user/ directory

Output :

Difference Between "make run-spawnhello" and "make run-exechello"
===> $make run-spawnhello
i am parent environment 00001001
[00001001] new env 00001002
[00001001] exiting gracefully
[00001001] free env 00001001
hello, world
i am environment 00001002
[00001002] exiting gracefully
[00001002] free env 00001002

===> $make run-exechello
[00000000] new env 00001001
hello, world
i am environment 00001001
[00001001] exiting gracefully
[00001001] free env 00001001



